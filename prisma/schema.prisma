// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "npx zod-prisma-types"
  useMultipleFiles = true
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  ADMIN
  KITCHEN
  WAITER
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  email       String       @unique
  name        String
  role        UserRole     @default(USER)
  restaurants Restaurant[]
}

model Restaurant {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)

  name           String  @unique @db.VarChar(155)
  description    String? @db.VarChar(255)
  bromatology    String?
  razonSocial    String
  hasDelivery    Boolean @default(false)
  hasPickUp      Boolean @default(false)
  mapCoordinates String? @db.VarChar(255)
  shippingCost   Float?

  owner         User            @relation(fields: [userId], references: [id])
  userId        Int
  address       Address         @relation(fields: [addressId], references: [id])
  addressId     Int
  Category      Category[]
  Product       Product[]
  PaymentMethod PaymentMethod[]
  BankAccount   BankAccount[]
  WorkSchedules WorkSchedules[]
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)

  /// @zod.string({ required_error: "Ingrese un nombre a la categoria",  }).min(3)
  name        String
  description String? @db.VarChar(255)

  products     Product[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  price     Int

  name        String
  description String? @db.VarChar(255)

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  Category     Category?  @relation(fields: [categoryId], references: [id])
  categoryId   Int?
}

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)

  name                String
  address             String  @db.VarChar(255)
  apartmenNumber      String?
  deliveryInformation String? @db.VarChar(255)
  phone               String
  country             String

  Restaurant Restaurant[]
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)

  name String

  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
}

enum BankName {
  Itau
  Brou
  Santander
  ScotiaBank
  HSBC
}

model BankAccount {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)

  bankName      BankName
  accountNumber String

  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
}

model WorkSchedules {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)

  days String
  from DateTime
  to   DateTime

  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
}
